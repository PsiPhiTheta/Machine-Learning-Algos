install.packages("RWeka")
install.packages("RWeka")
install.packages("RWeka")
dir
a
see
type
ls
library(RWeka)
subject_name <- c("John Doe", "Jane Doe", "Steve Graves")
temperature <- c(98.1, 98.6, 101.4)
flu_status <- c(FALSE, FALSE, TRUE)
q()
temperature[1]
temperature[2]
history
temperature[1:2]
temperature[1:3]
temperature[1:4]
temperature [4]
temperature [3]
temperature [-2]
gender <- factor(c(“MALE”, “FEMALE”, “MALE”))
gender <- factor(c("MALE", "FEMALE", "MALE"))
gender
blood <- factor(c("O", "AB", "A"),
blood <- factor(c("O", "AB", "A"), levels = c("A", "B", "AB", "O"))
blood
subject1 <- list(fullname = subject_name[1],
temperature = temperature[1],
flu_status = flu_status[1],
gender = gender[1],
subject1 <- list(fullname = subject_name[1], temperature = temperature[1], flu_status = flu_status[1], gender = gender[1], blood = blood[1])
subject 1
subject1
subject1[2]
subject1$temperature
subject1[c(“temperature”, “flu_status”)]
subject1$[c(“temperature”, “flu_status”)]
subject1[c("temperature", "flu_status")]
pt_data <- data.frame(subject_name, temperature, flu_status, gender, blood, stringsAsFactors = FALSE)
pt_data
pt_data$subject_name
pt_data[c("temperature", "flu_status")]
pt_data[1, 2]
pt_data[c(1, 3), c(2, 4)]
pt_data[, 1]
pt_data[-2, c(-1, -3, -5)]
m <- matrix(c('a', 'b', 'c', 'd'), nrow = 2)
m
m <- matrix(c('a', 'b', 'c', 'd', 'e', 'f'), nrow = 2)
m
pwd
ls
dir
save.image()
save(subject1, pt_data, m, file = "mydata.RData")
write.csv(pt_data, file = "pt_data.csv")
install.packages("RODBC")
library(RODBC)
usedcars <- read.csv("usedcars.csv", stringsAsFactors = FALSE)
usedcars <- read.csv("/R/usedcars.csv", stringsAsFactors = FALSE)
usedcars <- read.csv("usedcars.csv", stringsAsFactors = FALSE)
usedcars
str(usedcars)
str(pt_data)
summary(usedcars$year)
summary(usedcars)
median(usedcars$year)
mean(usedcars$year)
range(usedcars$year)
IQR(usedcars$year)
quantile(usedcars$year)
quantile(usedcars$price)
quantile(usedcars$price, probs = c(0.01, 0.99))
quantile(usedcars$price, seq(from = 0, to = 1, by = 0.20))
boxplot(usedcars$price, main="Boxplot of Used Car Prices", ylab="Price ($)")
hist(usedcars$price, main = "Histogram of Used Car Prices",
xlab = "Price ($)")
hist(usedcars$price, main = "Histogram of Used Car Prices", xlab = "Price ($)")
var(usedcars$price)
sd(usedcars$price)
table(usedcars$price)
table(usedcars$year)
model_table <- table(usedcars$year)
prop.table(model_table)
color_table <- table(usedcars$color)
color_pct <- prop.table(color_table) * 100
round(color_pct, digits = 1)
plot(x = usedcars$mileage, y = usedcars$price, main = "Scatterplot of Price vs. Mileage", xlab = "Used Car Odometer (mi.)", ylab = "Used Car Price ($)")
install.packages("gmodels")
library(gmodels)
usedcars$conservative <- usedcars$color %in% c("Black", "Gray", "Silver", "White")
table(usedcars$conservative)
CrossTable(x = usedcars$model, y = usedcars$conservative)
usedcars
CrossTable(x = usedcars$model, y = usedcars$conservative, chisq = TRUE)
save.image()
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
wbcd
str(wbcd)
wbcd <- wbcd[-1]
str(wbcd)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"),
labels = c("Benign", "Malignant"))
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malignant"))
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
$diagnosis
"$diagnosis"
table(wbcd$diagnosis)
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malignant"))
table(wbcd$diagnosis)
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
remove(wbcd)
wbcd <- read.csv("wisc_bc_data.csv", stringsAsFactors = FALSE)
wbcd <- wbcd[-1]
wbcd$diagnosis <- factor(wbcd$diagnosis, levels = c("B", "M"), labels = c("Benign", "Malignant"))
round(prop.table(table(wbcd$diagnosis)) * 100, digits = 1)
summary(wbcd[c("radius_mean", "area_mean", "smoothness_mean")])
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
remove(normalize)
normalize <- function(x) {return ((x-min(x))/(max(x)-min(x)))}
normalize(c(1, 2, 3, 4, 5))
normalize(c((1, 2, 3, 4, 5)*100))
normalize(c(10, 20, 30, 40, 50))
this command applies the normalize() function to columns 2
through 31 in the wbcd data frame, converts the resulting list to a data frame, and
wbcd_n <- as.data.frame(lapply(wbcd[2:31], normalize))
summary(wbcd)
summary(wbcd_n)
summary(wbcd_n$area)
summary(wbcd_n$area_mean)
summary(wbcd_n$diagnosis)
summary(wbcd_n$size_mean)
summary(wbcd_n$ID)
wbcd_train <- wbcd_n[1:469, ]
wbcd_test <- wbcd_n[470:569, ]
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[470:569, 1]
install.packages("class")
library(class)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,
remove(wbcd_test_pred)
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test, cl = wbcd_train_labels, k=21)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred, prop.chisq=FALSE)
wbcd_z <- as.data.frame(scale(wbcd[-1]))
summary(wbcd_z$area_mean)
wbcd_train <- wbcd_z[1:469, ]
wbcd_test <- wbcd_z[470:569, ]
wbcd_train_labels <- wbcd[1:469, 1]
wbcd_test_labels <- wbcd[470:569, 1]
wbcd_test_pred <- knn(train = wbcd_train, test = wbcd_test,cl = wbcd_train_labels, k=21)
CrossTable(x = wbcd_test_labels, y = wbcd_test_pred,prop.chisq=FALSE)
save.image()
q()
save.image()
load("~/.RData")
findFreqTerms(sms_dtm_train, 5)
install.packages("tm")
installed.packages()
install.packages("wordcloud")
library(tm)
library(wordcloud)
install.packages("class")
library(class)
install.packages("RWeka")
library(RWeka)
library(RWeka)
install.packages("RODBC")
library(RODBC)
findFreqTerms(sms_dtm_train, 5)
sms_dict <- c(findFreqTerms(sms_dtm_train, 5))
sms_train <- DocumentTermMatrix(sms_corpus_train, list(dictionary = sms_dict))
sms_test <- DocumentTermMatrix(sms_corpus_test, list(dictionary = sms_dict))
save.image()
convert_counts <- function(x) { x <- ifelse(x > 0, 1, 0) x <- factor(x, levels = c(0, 1), labels = c(""No"", ""Yes"")) return(x) }
convert_counts <- function(x) {
x <- ifelse(x > 0, 1, 0)
x <- factor(x, levels = c(0, 1), labels = c(""No"", ""Yes""))
return(x)
}
sms_freq_words <- findFreqTerms(sms_dtm_train, 5)
str(sms_dtm_train)
str(sms_freq_words)
sms_dtm_freq_train<- sms_dtm_train[ , sms_freq_words]
sms_dtm_freq_test <- sms_dtm_test[ , sms_freq_words]
convert_counts <- function(x) { x <- ifelse(x > 0, "Yes", "No") }
sms_train <- apply(sms_dtm_freq_train, MARGIN = 2, convert_counts)
sms_test <- apply(sms_dtm_freq_test, MARGIN = 2, convert_counts)
install.packages("e1071")
library(e1071)
sms_classifier <- naiveBayes(sms_train, sms_train_labels)
sms_train_labels <- sms_raw[1:4169, ]$type
sms_test_labels <- sms_raw[4170:5559, ]$type
sms_classifier <- naiveBayes(sms_train, sms_train_labels)
sms_test_pred <- predict(sms_classifier, sms_test)
library(gmodels)
install.packages("gmodels")
CrossTable(sms_test_pred, sms_test_labels, prop.chisq = FALSE, prop.t = FALSE, dnn = c('predicted', 'actual'))
sms_classifier2 <- naiveBayes(sms_train, sms_train_labels, laplace = 1)
sms_test_pred2 <- predict(sms_classifier2, sms_test)
CrossTable(sms_test_pred2, sms_test_labels, prop.chisq = FALSE, prop.t = FALSE, prop.r = FALSE, dnn = c('predicted', 'actual'))
save.image()
